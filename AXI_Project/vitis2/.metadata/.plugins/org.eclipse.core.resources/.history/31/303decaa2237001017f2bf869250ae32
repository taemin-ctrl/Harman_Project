/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */


#include <stdio.h>
#include <stdint.h> // uint32_t를 사용하기 위함.
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h" // (ctrl + space bar 하면 자동완성 기능) -> baase addr 확인가능
#include "sleep.h" // delay 가능


typedef struct {
	volatile uint32_t tx_data; // 8bit tx data
	volatile uint32_t rx_data; // 8bit rx data
	volatile uint32_t mode; // 00: send data, 01:send start, 10: send stop, 11: read data
	volatile uint32_t enable; // 1bit enable
	volatile uint32_t done; // 1bit done
	volatile uint32_t ready; // 1bit ready
} I2C_TypeDef;

typedef struct {
	volatile uint32_t DR;
	volatile uint32_t CR; // 0:output, 1:input
} GPIO_TypeDef;

#define I2C_BASEADDR 0x44A00000
#define I2C ((I2C_TypeDef*)(I2C_BASEADDR))
#define GPIO_BASEADDR 0x40000000
#define GPIOA ((GPIO_TypeDef *)(GPIO_BASEADDR)) // 전체괄호 쳐야함
#define B8(x)  ((x&0x01)<<0 | (x&0x02)<<1 | (x&0x04)<<2 | (x&0x08)<<3 | (x&0x10)<<4 | (x&0x20)<<5 | (x&0x40)<<6 | (x&0x80)<<7)
// I2C
void send_start(I2C_TypeDef* I2Cx);
void send_data(I2C_TypeDef* I2Cx, uint32_t data);
uint32_t read_data(I2C_TypeDef* I2Cx);
void send_stop(I2C_TypeDef* I2Cx);

// BTN
#define BUTTON_U    0
#define BUTTON_L    1
#define BUTTON_R    2
#define BUTTON_D    3

void button_init(GPIO_TypeDef *GPIOx);
uint32_t button_read(GPIO_TypeDef *GPIOx);
uint32_t btn_state_check(GPIO_TypeDef *GPIOx, uint32_t btn_position, uint32_t* btn_state);
enum {NN,NP,PP,PN}; // not pushed-not pushed / not pushed-pushed / pushed-pushed / pushed-not pushed

int main(){
	button_init(GPIOA);
	uint32_t btn_state[] = {NN,NN,NN,NN};
	uint32_t temp = 0;
	int addr = (B8(0b1110000)<<1);
	uint32_t rdata;
	while(1){
		if( btn_state_check(GPIOA, BUTTON_U, btn_state) == PN ){
			//tx_data update
			if(temp == 0xff){
				temp = 0;
			} else {
				temp++;
			}
			//write
			send_start(I2C);
			send_data(I2C,addr);
			send_data(I2C,temp);
			send_stop(I2C);

			//read
			send_start(I2C);
			send_data(I2C,addr + 1);
			rdata = read_data(I2C);
			send_stop(I2C);
			xil_printf("rdata : %d\n", rdata);
		} else if(btn_state_check(GPIOA, BUTTON_D, btn_state) == PN ){
			//tx_data update
			if(temp == 0x00){
				temp = 0xff;
			} else {
				temp--;
			}
			//write
			send_start(I2C);
			send_data(I2C,addr);
			send_data(I2C,temp);
			send_stop(I2C);

			//read
			send_start(I2C);
			send_data(I2C,addr + 1);
			rdata = read_data(I2C);
			send_stop(I2C);
			xil_printf("rdata : %d\n", rdata);
		}
	}
	return 0;
}

void send_start(I2C_TypeDef* I2Cx)
{
	if(I2Cx->ready == 1){
		I2Cx->mode = 1;
		I2Cx->enable = 1;
		I2Cx->enable = 0;
	}
	while(I2Cx->ready != 1){}
	return;
}
void send_data(I2C_TypeDef* I2Cx, uint32_t data)
{
	if(I2Cx->ready == 1){
		I2Cx->tx_data = data;
		I2Cx->mode = 0;
		I2Cx->enable = 1;
		I2Cx->enable = 0;
	}
	while(I2Cx->ready != 1){}
	return;
}
uint32_t read_data(I2C_TypeDef* I2Cx){
	if(I2Cx->ready == 1){
		I2Cx->mode = 3;
		I2Cx->enable = 1;
		I2Cx->enable = 0;
	}
	while(I2Cx->ready != 1){}
	return I2Cx->rx_data;
}
void send_stop(I2C_TypeDef* I2Cx)
{
	if(I2Cx->ready == 1){
		I2Cx->mode = 2;
		I2Cx->enable = 1;
		I2Cx->enable = 0;
	}
	while(I2Cx->ready != 1){}
	return;
}
void button_init(GPIO_TypeDef *GPIOx)
{
	GPIOx->CR = 0xf; // GPIO 4개 입력모드
}
uint32_t button_read(GPIO_TypeDef *GPIOx)
{
	return GPIOx->DR;
}

uint32_t btn_state_check(GPIO_TypeDef *GPIOx, uint32_t btn_position, uint32_t* btn_state)
{
	uint32_t btn_read_result = button_read(GPIOx) & 1<<btn_position;
	switch(btn_state[btn_position]){
	case NN: if(btn_read_result){
		btn_state[btn_position] = NP;
		return NP;
	} else {
		btn_state[btn_position] = NN;
		return NN;
	}
	break;
	case NP: if(btn_read_result){
		btn_state[btn_position] = PP;
		return PP;
	} else {
		btn_state[btn_position] = PN;
		return PN;
	}
	break;
	case PP: if(btn_read_result){
		btn_state[btn_position] = PP;
		return PP;
	} else {
		btn_state[btn_position] = PN;
		return PN;
	}
	break;
	case PN: if(btn_read_result){
		btn_state[btn_position] = NP;
		return NP;
	} else {
		btn_state[btn_position] = NN;
		return NN;
	}
	break;
	}
}
